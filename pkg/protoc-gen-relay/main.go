package main

import (
	"bytes"
	"os/exec"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)

		for _, f := range gen.Files {
			if f.Generate {
				generateFile(gen, f)
			}
		}
		return nil
	})
}

func getProtocVersion() (string, error) {
	cmd := exec.Command("protoc", "--version")
	var out bytes.Buffer
	cmd.Stdout = &out
	err := cmd.Run()
	if err != nil {
		return "", err
	}
	return out.String(), nil
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {

	version, err := getProtocVersion()
	if err != nil {
		version = "unknown"
	}

	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+"_relay.pb.go", file.GoImportPath)
	g.P("// Code generated by protoc-gen-relay. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// \tprotoc-gen-relay v1.0.0")
	g.P("// \tprotoc        ", version)
	g.P("// source: ", file.Proto.GetName())
	g.P("package ", file.GoPackageName)

	g.P("import (")
	g.P("\t\"github.com/telia-oss/relay\"")
	g.P(")")

	g.P("func RegisterServiceRelay(name string, config relay.Config) *relay.Relay {")
	g.P("\treturn relay.Must(relay.New(name, config))")
	g.P("}")
}
